#!/usr/local/bin/ruby1.9 -w
# 
#  nosyd
#  homework 6
#  
#  Created by Glen Cuthbertson on 2009-11-06.
#  Copyright 2009 GLENC.COM. All rights reserved.
# 
exit!(0) if fork
require 'yaml'

#Dir.chdir("/")
File::umask(0)

STDIN.reopen("/dev/null")
STDOUT.reopen("/dev/null","w")
STDERR.reopen("/dev/null","w")

def setConstants
  $configFile = File.basename($0)+'.conf'
  $configHash = {}
  $run = true
  $debug = false
  $logName = File.basename($0)+'.log'
  $logFile = File.new($logName,"a")
end

def daemon_log(str)
  $logFile.reopen($logName,"a")
  msg = "[#{Time.now.strftime("%m/%d/%Y-%H:%M:%S")}] #{str}"
  $debug ? (puts msg) : ($logFile.puts msg)
  $logFile.close
end


def defineSigs
  Signal.trap("INT")  {clearLog}
  Signal.trap("HUP")  {readConf true}
  Signal.trap("QUIT") {die}
  Signal.trap("USR1") {writeSecret}
  Signal.trap("USR2") {debugMode}
end

def clearLog
  begin
    File.truncate($logName,0)
    daemon_log "SIGINT: logcleared"    
  rescue Exception => e
    deamon_log e
  end
end

def readConf (sig=false)
  begin
    config = File.open($configFile,"r"){|f| $configHash = YAML.load(f)}
    daemon_log "SIGHUP: re-reading conf file" if sig
    daemon_log "**************Read Config file: #{$configFile} to Config Hash"
    daemon_log "**************Config hash contains:"
    $configHash.each {|k,v| daemon_log "#{k}:#{v}"}
  rescue
    daemon_log "cannot file config file: #{configFile}"
    abort
  end
end

def die
  daemon_log "SIGQUIT: quitting pid: #{$$}"
  $run = false
end

def writeSecret
  daemon_log "SIGUSR1: the secret code is: #{$configHash['secret_code']}"
end

def debugMode
  daemon_log "SIGUSR2: Toggling debug mode from: #{$debug}"
  $debug ? $debug = false : $debug = true
end

def go
  defineSigs
  setConstants
  daemon_log "**************Strating! (#{$$})"
  daemon_log "working directory: #{Dir.getwd}"
  readConf
end

def findJnk
  dir = Dir.getwd
  foo = `find #{dir} -type f -iname '*#{$configHash['junk_file_ext']}'`
  arr =  foo.split("\n")
  daemon_log "looking for junk files"
  if arr.length > 0
    arr.each {|i| deleteFile i} 
  else
    daemon_log "no junk files found"
  end
  return arr
end

def deleteFile (path)
  daemon_log "deleting: #{path}"
  File.delete(path)
end

go

while $run do
  begin
    daemon_log "I'M AWAKE!!!"
    findJnk
    daemon_log "...going back to sleep for #{$configHash['sleep_time']} seconds"
    sleep $configHash['sleep_time'].to_i
  rescue Exception => e
    daemon_log e
    die
  end
end